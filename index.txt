<!doctype html>
<html>
<head>
    <title>Elasticsearch AngularJS</title>
	<meta charset="UTF-8" />
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<title>Text Input Effects | Set 1</title>
	<meta name="description" content="Simple ideas for enhancing text input interactions" />
	<meta name="keywords" content="input, text, effect, focus, transition, interaction, inspiration, web design" />
	<meta name="author" content="Codrops" />
	<link rel="shortcut icon" href="../favicon.ico">
	<link rel="stylesheet" type="text/css" href="css/normalize.css" />
	<link rel="stylesheet" type="text/css" href="fonts/font-awesome-4.2.0/css/font-awesome.min.css" />
	<link rel="stylesheet" type="text/css" href="css/demo.css" />
	<link rel="stylesheet" type="text/css" href="css/set1.css" />
</head>
<body ng-app="testApp">

<div ng-controller="mainController" class="container">
<section class="content bgcolor-4">
    <form ng-submit="search()">
        <!-- <label>
            Search: <input type="text" ng-model="search.queryTerm" ng-change="autoComplete()"/>
        </label> -->
		<h2 class="nomargin-bottom">Maglis Search</h2>
		<span class="input input--hoshi">
		<input class="input__field input__field--hoshi" id="input-1" type="text" ng-model="search.queryTerm" ng-change="autoComplete()" placeholder ="Search..."/>
		<label class="input__label input__label--hoshi input__label--hoshi-color-1" for="input-1">
		<span class="input__label-content input__label-content--hoshi"></span>
		</label>
        </span>
		
		<!-- <section class="content bgcolor-3">
			<span class="input input--makiko">
				<input class="input__field input__field--makiko" type="text" id="input-16" ng-model="search.queryTerm" ng-change="autoComplete()"/>
				<label class="input__label input__label--makiko" for="input-16">
					<span class="input__label-content input__label-content--makiko">Search</span>
				</label>
			</span>
		</section> -->
		
    </form>

    <h3>Autcomplete:</h3>
    <span>Results will be displayed when start typing.</span>
    <ul>
        <li ng-hide="autoCompleteResults.length">
            No results found
        </li>
        <li ng-repeat="result in autoCompleteResults">
            {{result._source.input}} 
			
			{{result._source.output}}
        </li>
    </ul>
	
	<h3>Search:</h3>
    <span>Hit enter to see results.</span>
    <ul>
        <li ng-hide="results.length">
            No results found
        </li>
        <li ng-repeat="result in results">
            {{result._source.input}} 
			
			{{result._source.output}}
        </li>
    </ul>
	
	<h3>Highlighting:</h3>
    <span>Results will be displayed with hightlighting.</span>
    <ul>
        <li ng-hide="highlightResults.length">
            No results found
        </li>
        <li ng-repeat="result in highlightResults">
			{{result.highlight.output}}
        </li>
    </ul>
</div>

<script src="lib/angular/angular.min.js"></script>    
<script src="lib/elasticsearch/elasticsearch.angular.js"></script>

<!-- App -->
<script src="js/app.js"></script>
<!-- Controllers -->
<script src="js/controllers/mainController.js"></script>

<script src="js/classie.js"></script>
<script>
	(function() {
		// trim polyfill : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim
		if (!String.prototype.trim) {
			(function() {
				// Make sure we trim BOM and NBSP
				var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;
				String.prototype.trim = function() {
					return this.replace(rtrim, '');
				};
			})();
		}

		[].slice.call( document.querySelectorAll( 'input.input__field' ) ).forEach( function( inputEl ) {
			// in case the input is already filled..
			if( inputEl.value.trim() !== '' ) {
				classie.add( inputEl.parentNode, 'input--filled' );
			}

			// events:
			inputEl.addEventListener( 'focus', onInputFocus );
			inputEl.addEventListener( 'blur', onInputBlur );
		} );

		function onInputFocus( ev ) {
			classie.add( ev.target.parentNode, 'input--filled' );
		}

		function onInputBlur( ev ) {
			if( ev.target.value.trim() === '' ) {
				classie.remove( ev.target.parentNode, 'input--filled' );
			}
		}
	})();
</script>


</body>
</html>